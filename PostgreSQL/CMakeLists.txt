# Orthanc - A Lightweight, RESTful DICOM Store
# Copyright (C) 2012-2016 Sebastien Jodogne, Medical Physics
# Department, University Hospital of Liege, Belgium
# Copyright (C) 2017-2023 Osimis S.A., Belgium
# Copyright (C) 2024-2025 Orthanc Team SRL, Belgium
# Copyright (C) 2021-2025 Sebastien Jodogne, ICTEAM UCLouvain, Belgium
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


cmake_minimum_required(VERSION 2.8)
project(OrthancPostgreSQL)

set(ORTHANC_PLUGIN_VERSION "mainline")

# This is the preferred version of the Orthanc SDK for this plugin
set(ORTHANC_SDK_DEFAULT_VERSION "1.12.5")

# This is the list of the versions of the Orthanc SDK against which
# this plugin will compile
set(ORTHANC_SDK_COMPATIBLE_VERSIONS "1.12.3" "1.12.4" "1.12.5")

# This is the minimal version of the Orthanc runtime that will provide
# best performance. If the version of the Orthanc runtime is below
# this minimal version, a warning message will be printed (but the
# plugin will still start).
set(ORTHANC_OPTIMAL_VERSION_MAJOR    1)
set(ORTHANC_OPTIMAL_VERSION_MINOR    12)
set(ORTHANC_OPTIMAL_VERSION_REVISION 5)

if (ORTHANC_PLUGIN_VERSION STREQUAL "mainline")
  set(ORTHANC_FRAMEWORK_VERSION "mainline")
  set(ORTHANC_FRAMEWORK_DEFAULT_SOURCE "hg")
else()
  set(ORTHANC_FRAMEWORK_VERSION "1.12.5")
  set(ORTHANC_FRAMEWORK_DEFAULT_SOURCE "web")
endif()

set(ENABLE_SSL ON)
include(${CMAKE_SOURCE_DIR}/../Resources/CMake/DatabasesPluginParameters.cmake)

set(ENABLE_POSTGRESQL_BACKEND ON)
set(OPENSSL_STATIC_VERSION "3.0" CACHE STRING "Force the use of OpenSSL 3.0.x" FORCE)

include(${CMAKE_SOURCE_DIR}/../Resources/CMake/DatabasesPluginConfiguration.cmake)


if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  execute_process(
    COMMAND 
    ${PYTHON_EXECUTABLE} ${ORTHANC_FRAMEWORK_ROOT}/../Resources/WindowsResources.py
    ${ORTHANC_PLUGIN_VERSION} "PostgreSQL storage area plugin" OrthancPostgreSQLStorage.dll
    "PostgreSQL as a database back-end to Orthanc (storage area)"
    ERROR_VARIABLE Failure
    OUTPUT_FILE ${AUTOGENERATED_DIR}/StorageVersion.rc
    )

  if (Failure)
    message(FATAL_ERROR "Error while computing the version information: ${Failure}")
  endif()

  execute_process(
    COMMAND 
    ${PYTHON_EXECUTABLE} ${ORTHANC_FRAMEWORK_ROOT}/../Resources/WindowsResources.py
    ${ORTHANC_PLUGIN_VERSION} "PostgreSQL index plugin" OrthancPostgreSQLIndex.dll
    "PostgreSQL as a database back-end to Orthanc (index)"
    ERROR_VARIABLE Failure
    OUTPUT_FILE ${AUTOGENERATED_DIR}/IndexVersion.rc
    )

  if (Failure)
    message(FATAL_ERROR "Error while computing the version information: ${Failure}")
  endif()

  set(INDEX_RESOURCES ${AUTOGENERATED_DIR}/IndexVersion.rc)
  set(STORAGE_RESOURCES ${AUTOGENERATED_DIR}/StorageVersion.rc)
endif()


EmbedResources(
  POSTGRESQL_PREPARE_INDEX           ${CMAKE_SOURCE_DIR}/Plugins/SQL/PrepareIndex.sql
  POSTGRESQL_UPGRADE_UNKNOWN_TO_REV1 ${CMAKE_SOURCE_DIR}/Plugins/SQL/Upgrades/UnknownToRev1.sql
  POSTGRESQL_UPGRADE_REV1_TO_REV2    ${CMAKE_SOURCE_DIR}/Plugins/SQL/Upgrades/Rev1ToRev2.sql
  POSTGRESQL_UPGRADE_REV2_TO_REV3    ${CMAKE_SOURCE_DIR}/Plugins/SQL/Upgrades/Rev2ToRev3.sql
  POSTGRESQL_UPGRADE_REV3_TO_REV4    ${CMAKE_SOURCE_DIR}/Plugins/SQL/Upgrades/Rev3ToRev4.sql
  POSTGRESQL_UPGRADE_REV4_TO_REV5    ${CMAKE_SOURCE_DIR}/Plugins/SQL/Upgrades/Rev4ToRev5.sql
  )


if (EXISTS ${ORTHANC_SDK_ROOT}/orthanc/OrthancDatabasePlugin.proto)
  add_custom_command(
    COMMAND
    ${PROTOC_EXECUTABLE} ${ORTHANC_SDK_ROOT}/orthanc/OrthancDatabasePlugin.proto --cpp_out=${AUTOGENERATED_DIR} -I${ORTHANC_SDK_ROOT}/orthanc/
    DEPENDS
    ProtobufCompiler
    ${ORTHANC_SDK_ROOT}/orthanc/OrthancDatabasePlugin.proto
    OUTPUT
    ${AUTOGENERATED_DIR}/OrthancDatabasePlugin.pb.cc
    ${AUTOGENERATED_DIR}/OrthancDatabasePlugin.pb.h
    )

  list(APPEND AUTOGENERATED_SOURCES
    ${AUTOGENERATED_DIR}/OrthancDatabasePlugin.pb.cc
    )
endif()


add_custom_target(
  AutogeneratedTarget
  DEPENDS 
  ${AUTOGENERATED_SOURCES}
  )

add_library(FrameworkForPlugins STATIC
  ${AUTOGENERATED_SOURCES}
  ${DATABASES_SOURCES}
  ${ORTHANC_DATABASES_ROOT}/Framework/Plugins/PluginInitialization.cpp
  Plugins/PostgreSQLIndex.cpp
  Plugins/PostgreSQLStorageArea.cpp
  )

set_target_properties(FrameworkForPlugins PROPERTIES
  POSITION_INDEPENDENT_CODE ON
  COMPILE_FLAGS -DORTHANC_ENABLE_LOGGING_PLUGIN=1
  )

add_library(OrthancPostgreSQLIndex SHARED
  ${INDEX_RESOURCES}
  Plugins/IndexPlugin.cpp
  )

add_library(OrthancPostgreSQLStorage SHARED
  ${STORAGE_RESOURCES}
  Plugins/StoragePlugin.cpp
  )

add_dependencies(FrameworkForPlugins AutogeneratedTarget)

target_link_libraries(OrthancPostgreSQLIndex FrameworkForPlugins)
target_link_libraries(OrthancPostgreSQLStorage FrameworkForPlugins)

message("Setting the version of the libraries to ${ORTHANC_PLUGIN_VERSION}")

add_definitions(
  -DORTHANC_PLUGIN_VERSION="${ORTHANC_PLUGIN_VERSION}"
  )

set_target_properties(OrthancPostgreSQLStorage PROPERTIES 
  VERSION ${ORTHANC_PLUGIN_VERSION} 
  SOVERSION ${ORTHANC_PLUGIN_VERSION}
  COMPILE_FLAGS -DORTHANC_ENABLE_LOGGING_PLUGIN=1
  )

set_target_properties(OrthancPostgreSQLIndex PROPERTIES 
  VERSION ${ORTHANC_PLUGIN_VERSION} 
  SOVERSION ${ORTHANC_PLUGIN_VERSION}
  COMPILE_FLAGS -DORTHANC_ENABLE_LOGGING_PLUGIN=1
  )


install(
  TARGETS OrthancPostgreSQLIndex OrthancPostgreSQLStorage
  RUNTIME DESTINATION lib    # Destination for Windows
  LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux
  )


add_executable(UnitTests
  Plugins/PostgreSQLIndex.cpp
  Plugins/PostgreSQLStorageArea.cpp
  UnitTests/PostgreSQLTests.cpp
  UnitTests/UnitTestsMain.cpp
  ${DATABASES_SOURCES}
  ${GOOGLE_TEST_SOURCES}
  ${AUTOGENERATED_SOURCES}
  )

add_dependencies(UnitTests AutogeneratedTarget)

target_link_libraries(UnitTests ${GOOGLE_TEST_LIBRARIES})
set_target_properties(UnitTests PROPERTIES
  COMPILE_FLAGS -DORTHANC_ENABLE_LOGGING_PLUGIN=0
  )

if (COMMAND DefineSourceBasenameForTarget)
  DefineSourceBasenameForTarget(FrameworkForPlugins)
  DefineSourceBasenameForTarget(OrthancPostgreSQLIndex)
  DefineSourceBasenameForTarget(OrthancPostgreSQLStorage)
  DefineSourceBasenameForTarget(UnitTests)
endif()
